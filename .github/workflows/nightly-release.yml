name: Nightly release the up-to-date container on dockerhub following cli releases.
# Every morning around 8:00 GMT

on:
  workflow_dispatch:
  schedule:
  #Everyday at around 4:00 UTC (not using exact hours helps with runners availability)
    - cron: '58 3 * * *'

env:
  executable-name: 'scalingo'
  executable-archive-name-pattern: 'scalingo_RELEASE_TAG_VERSION_linux_386'
  executable-archive-extention: 'tar.gz'
  target-repository: 'scalingo/cli'
  target-dockerhub-registry: 'rcambonie/scalingo-cli'

jobs:
  get-release-version:
    name: Get target executable latest release version and check if a tag with the same value exist on the dockerhub registry.
    runs-on: ubuntu-latest
    outputs:
      release-tag-version: ${{ steps.latest-release-info.outputs.tag-version }}
      tag-already-exist-on-registry: ${{ steps.latest-release-info.outputs.tag-already-exist-on-registry }}

    steps:
      - name: Get target release version and check if a tag with the same value exist on the dockerhub registry
        id: latest-release-info
        run: |
          RELEASE_TAG_VERSION=$(curl --silent "https://api.github.com/repos/${{ env.target-repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo $RELEASE_TAG_VERSION
          set +e
          SAME_TAG_ALREADY_EXIST_ON_REGISTRY=$(curl --silent 'https://registry.hub.docker.com/v2/repositories/rcambonie/scalingo-cli/tags' | grep -c "\"$RELEASE_TAG_VERSION\"")
          echo $SAME_TAG_ALREADY_EXIST_ON_REGISTRY
          set -e
          echo "::set-output name=tag-version::$RELEASE_TAG_VERSION"
          echo "::set-output name=tag-already-exist-on-registry::$SAME_TAG_ALREADY_EXIST_ON_REGISTRY"


  dynamic-variables:
    #Skipped if the tag is already present in the target registry
    if: ${{ needs.get-release-version.outputs.tag-already-exist-on-registry == 0  }}
    name: Generate variables used in the following jobs from the environment variables and secrets.
    runs-on: ubuntu-latest
    needs:
      - get-release-version

    outputs:
      executable-name: ${{ steps.executable-name.outputs.value }}
      executable-archive-name: ${{ steps.executable-archive-name.outputs.value }}
      executable-archive-extention: ${{ steps.executable-archive-extention.outputs.value }}
      target-repository: ${{ steps.target-repository.outputs.value }}
      target-dockerhub-registry: ${{ steps.target-dockerhub-registry.outputs.value }}
      is-discord-hooked: ${{ steps.is-discord-hooked.outputs.value }}

    steps:
      - name: Executable archive name with replaced release version tag
        id: executable-archive-name
        #'Simple' variable replacement. We use the bash replace syntax as it is the default shell on github runners
        run: |
          EXECUTABLE_ARCHIVE_NAME=${{ env.executable-archive-name-pattern }}
          RELEASE_TAG_VERSION=${{ needs.get-release-version.outputs.release-tag-version }}
          EXECUTABLE_ARCHIVE_NAME=${EXECUTABLE_ARCHIVE_NAME//RELEASE_TAG_VERSION/"$RELEASE_TAG_VERSION"}     
          echo "::set-output name=value::$EXECUTABLE_ARCHIVE_NAME"

      - name: Executable name from environment variable
        id: executable-name
        run: |
          EXECUTABLE_NAME=${{ env.executable-name }}
          echo "::set-output name=value::$EXECUTABLE_NAME"

      - name: Executable archive file extention from environment variable
        id: executable-archive-extention
        run: |
          EXECUTABLE_ARCHIVE_EXTENTION=${{ env.executable-archive-extention }}
          echo "::set-output name=value::$EXECUTABLE_ARCHIVE_EXTENTION"

      - name: Target repository from environment variable
        id: target-repository
        run: |
          TARGET_REPOSITORY=${{ env.target-repository }}
          echo "::set-output name=value::$TARGET_REPOSITORY"

      - name: Target repository fully qualified name
        id: target-dockerhub-registry
        run: |
          TARGET_DOCKERHUB_REPOSITORY=${{ env.target-dockerhub-registry }}
          echo "::set-output name=value::$TARGET_DOCKERHUB_REPOSITORY"

      - name: Has a discord webhook for notification been defined
        id: is-discord-hooked
        run: |
          IS_HOOKED=${{ secrets.DISCORD_NOTIFY_HOOK_URL != '' }}
          echo "::set-output name=value::$IS_HOOKED"


  dockerfile-from-template:
    name: Generate a Dockerfile from a base template with replaced variables
    runs-on: ubuntu-latest
    needs:
      - get-release-version
      - dynamic-variables

    steps:
      - name: Retrieve the repository files
        uses: actions/checkout@v3

      - name: Generate the target dockerfile by replacing the variables in Dockerfile_template template
        run: |
          sed -i 's|RELEASE_TAG_VERSION|${{ needs.get-release-version.outputs.release-tag-version }}|g' Dockerfile
          sed -i 's|TARGET_REPOSITORY|${{ needs.dynamic-variables.outputs.target-repository }}|g' Dockerfile
          sed -i 's|EXECUTABLE_ARCHIVE_NAME_PATTERN|${{ needs.dynamic-variables.outputs.executable-archive-name }}|g' Dockerfile
          sed -i 's|EXECUTABLE_ARCHIVE_EXTENTION|${{ needs.dynamic-variables.outputs.executable-archive-extention }}|g' Dockerfile
          sed -i 's|EXECUTABLE_NAME|${{ needs.dynamic-variables.outputs.executable-name }}|g' Dockerfile

      - name: Upload resulting Dockerfile as artifact for reference
        uses: actions/upload-artifact@v3
        with:
          name: generated-dockerfile
          path: ./Dockerfile



  build-and-push-docker-image:
    name: Build Docker image and push to registry if on master branch
    runs-on: ubuntu-latest
    needs:
      - get-release-version
      - dockerfile-from-template

    steps:
      - name: Retrieve Dockerfile
        uses: actions/download-artifact@v3
        with:
          name: generated-dockerfile
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: |
            ${{ env.target-dockerhub-registry }}:latest 
            ${{ env.target-dockerhub-registry }}:${{ needs.get-release-version.outputs.release-tag-version }}
          # build on feature branches, push only on master branch
          push: ${{ github.ref == 'refs/heads/master' }}


  notify-discord:
    name: Discord Notification
    if: ${{ needs.dynamic-variables.outputs.is-discord-hooked == 'true' }}
    needs:
      - get-release-version
      - dynamic-variables
      - build-and-push-docker-image

    uses: ./.github/workflows/_notify-deployment.discord.reusable.yml
    with:
      application-full-name: ${{ needs.dynamic-variables.outputs.target-dockerhub-registry }}
      tag-version: ${{ needs.get-release-version.outputs.release-tag-version }}
    secrets:
      DISCORD_NOTIFY_HOOK_URL: ${{ secrets.DISCORD_NOTIFY_HOOK_URL }}

